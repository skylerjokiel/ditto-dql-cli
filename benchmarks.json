{
    "count": {
        "query": "SELECT count(*) FROM movies"
    },
    "select_all": {
        "query": "SELECT * FROM movies"
    },
    "select_small": {
        "query": "SELECT * FROM movies LIMIT 10"
    },
    "select_100": {
        "query": "SELECT * FROM movies LIMIT 100"
    },
    "select_1000": {
        "query": "SELECT * FROM movies LIMIT 1000"
    },
    "select_10000": {
        "query": "SELECT * FROM movies LIMIT 10000"
    },
    "insert": {
        "query": "INSERT INTO movies DOCUMENTS(deserialize_json('{\"plot\":\"cb045f61-c0bb-4ba8-ad12-8ae8a4ba061d\",\"genres\":[\"Drama\",\"Fantasy\",\"Adventure\"],\"runtime\":114,\"rated\":\"PG-13\",\"cast\":[\"Alex Johnson\",\"Maria Lopez\",\"Samuel Kim\",\"Nina Patel\"],\"num_mflix_comments\":0,\"fullplot\":\"A struggling writer discovers a hidden city beneath the streets, where imagination becomes reality. As he explores the boundaries between fiction and truth, he learns that every story he writes alters lives in the real world, forcing him to confront the consequences of his creativity.\",\"languages\":[\"English\"],\"released\":\"2025-07-18T00:00:00.000Z\",\"directors\":[\"Jordan Smith\"],\"writers\":[\"Taylor Morgan (screenplay)\",\"Casey Lee (story)\"],\"awards\":{\"wins\":0,\"nominations\":0,\"text\":\"No awards yet.\"},\"lastupdated\":\"2025-10-03 12:00:00.000000000\",\"imdb\":{\"rating\":0.0,\"votes\":0,\"id\":999999},\"countries\":[\"USA\"],\"tomatoes\":{\"viewer\":{\"rating\":0,\"numReviews\":0},\"lastUpdated\":\"2025-10-03T12:00:00.000Z\"}}'))",
        "postQueries": [
            "EVICT FROM movies WHERE plot = 'cb045f61-c0bb-4ba8-ad12-8ae8a4ba061d'"
        ]
    },
    "update_single": {
        "preQueries": [
            "INSERT INTO movies DOCUMENTS(deserialize_json('{\"plot\":\"update-test-benchmark-uuid\",\"runtime\":999,\"rated\":\"TEST\"}'))"
        ],
        "query": "UPDATE movies SET runtime = 888 WHERE plot = 'update-test-benchmark-uuid'",
        "postQueries": [
            "EVICT FROM movies WHERE plot = 'update-test-benchmark-uuid'"
        ]
    },
    "delete_single": {
        "preQueries": [
            "INSERT INTO movies DOCUMENTS(deserialize_json('{\"plot\":\"delete-test-benchmark-uuid\",\"rated\":\"TEST\"}'))"
        ],
        "query": "EVICT FROM movies WHERE plot = 'delete-test-benchmark-uuid'"
    },
    "filtered_query_no_index": {
        "preQueries": [
            "DROP INDEX IF EXISTS movies_rated ON movies"
        ],
        "query": "SELECT * FROM movies WHERE rated = 'PG'"
    },
    "filtered_query_with_index": {
        "preQueries": [
            "DROP INDEX IF EXISTS movies_rated ON movies",
            "CREATE INDEX movies_rated ON movies (rated)"
        ],
        "query": "SELECT * FROM movies WHERE rated = 'PG'",
        "postQueries": [
            "DROP INDEX IF EXISTS movies_rated ON movies"
        ]
    },
    "range_query_year": {
        "query": "SELECT * FROM movies WHERE _id.year > '2000' AND _id.year < '2010'"
    },
    "range_query_runtime": {
        "query": "SELECT * FROM movies WHERE runtime > 120 AND runtime < 180"
    },
    "range_query_year_indexed": {
        "preQueries": [
            "DROP INDEX IF EXISTS movies_year_range ON movies",
            "CREATE INDEX movies_year_range ON movies (_id.year)"
        ],
        "query": "SELECT * FROM movies WHERE _id.year > '2000' AND _id.year < '2010'",
        "postQueries": [
            "DROP INDEX IF EXISTS movies_year_range ON movies"
        ]
    },
    "multi_field_filter": {
        "query": "SELECT * FROM movies WHERE rated = 'PG' AND runtime > 120"
    },
    "text_search_plot": {
        "query": "SELECT * FROM movies WHERE CONTAINS(plot, 'love')"
    },
    "text_search_plot_indexed": {
        "preQueries": [
            "DROP INDEX IF EXISTS movies_plot_text ON movies",
            "CREATE INDEX movies_plot_text ON movies (plot)"
        ],
        "query": "SELECT * FROM movies WHERE CONTAINS(plot, 'love')",
        "postQueries": [
            "DROP INDEX IF EXISTS movies_plot_text ON movies"
        ]
    },
    "text_search_title": {
        "query": "SELECT * FROM movies WHERE CONTAINS(_id.title, 'Star')"
    },
    "nested_field_awards": {
        "query": "SELECT * FROM movies WHERE awards.wins > 5"
    },
    "nested_field_awards_indexed": {
        "preQueries": [
            "DROP INDEX IF EXISTS movies_awards_wins ON movies",
            "CREATE INDEX movies_awards_wins ON movies (awards.wins)"
        ],
        "query": "SELECT * FROM movies WHERE awards.wins > 5",
        "postQueries": [
            "DROP INDEX IF EXISTS movies_awards_wins ON movies"
        ]
    },
    "nested_field_imdb": {
        "query": "SELECT * FROM movies WHERE imdb.rating > 8.0"
    },
    "sort_by_year": {
        "query": "SELECT * FROM movies ORDER BY _id.year DESC LIMIT 100"
    },
    "sort_by_runtime": {
        "query": "SELECT * FROM movies ORDER BY runtime ASC LIMIT 100"
    },
    "sort_by_year_indexed": {
        "preQueries": [
            "DROP INDEX IF EXISTS movies_year_sort ON movies",
            "CREATE INDEX movies_year_sort ON movies (_id.year)"
        ],
        "query": "SELECT * FROM movies ORDER BY _id.year DESC LIMIT 100",
        "postQueries": [
            "DROP INDEX IF EXISTS movies_year_sort ON movies"
        ]
    },
    "aggregation_count_by_rated": {
        "query": "SELECT rated, COUNT(*) FROM movies GROUP BY rated"
    },
    "aggregation_avg_runtime": {
        "query": "SELECT AVG(runtime) FROM movies WHERE runtime IS NOT NULL"
    },
    "aggregation_count_by_year": {
        "query": "SELECT _id.year, COUNT(*) FROM movies GROUP BY _id.year ORDER BY _id.year DESC LIMIT 10"
    },
    "year_filter_no_index": {
        "preQueries": [
            "DROP INDEX IF EXISTS movies_year ON movies"
        ],
        "query": "SELECT * FROM movies WHERE _id.year > '2000'"
    },
    "year_filter_with_index": {
        "preQueries": [
            "DROP INDEX IF EXISTS movies_year ON movies",
            "CREATE INDEX movies_year ON movies (_id.year)"
        ],
        "query": "SELECT * FROM movies WHERE _id.year > '2000'",
        "postQueries": [
            "DROP INDEX IF EXISTS movies_year ON movies"
        ]
    },
    "exact_match_id": {
        "query": "SELECT * FROM movies WHERE _id.year = '2001'"
    },
    "exact_match_runtime": {
        "query": "SELECT * FROM movies WHERE runtime = 120"
    },
    "null_check": {
        "query": "SELECT * FROM movies WHERE rated IS NULL"
    },
    "not_null_check": {
        "query": "SELECT * FROM movies WHERE rated IS NOT NULL"
    },
    "in_clause_small": {
        "query": "SELECT * FROM movies WHERE rated IN ('G', 'PG')"
    },
    "in_clause_large": {
        "query": "SELECT * FROM movies WHERE _id.year IN ('1999', '2000', '2001', '2002', '2003', '2004', '2005')"
    },
    "like_pattern": {
        "query": "SELECT * FROM movies WHERE _id.title LIKE '%Star%'"
    },
    "complex_where_clause": {
        "query": "SELECT * FROM movies WHERE (rated = 'PG' OR rated = 'G') AND runtime > 90 AND _id.year > '1990'"
    },
    "array_field_query": {
        "query": "SELECT * FROM movies WHERE 'Drama' IN genres"
    },
    "select_specific_fields": {
        "query": "SELECT _id.title, runtime, rated FROM movies LIMIT 1000"
    },
    "select_nested_fields": {
        "query": "SELECT _id.title, awards.wins, imdb.rating FROM movies LIMIT 1000"
    },
    "count_with_condition": {
        "query": "SELECT COUNT(*) FROM movies WHERE runtime > 120"
    },
    "distinct_values": {
        "query": "SELECT DISTINCT rated FROM movies"
    },
    "empty_result_set": {
        "query": "SELECT * FROM movies WHERE _id.year = '1800'"
    },
    "single_result": {
        "query": "SELECT * FROM movies WHERE _id.year = '1893'"
    },
    "large_text_search": {
        "query": "SELECT * FROM movies WHERE CONTAINS(fullplot, 'adventure')"
    },
    "multiple_or_conditions": {
        "query": "SELECT * FROM movies WHERE rated = 'G' OR rated = 'PG' OR rated = 'PG-13' OR rated = 'R'"
    },
    "multiple_and_conditions": {
        "query": "SELECT * FROM movies WHERE rated = 'PG' AND runtime > 90 AND runtime < 150 AND _id.year > '1990'"
    }
}